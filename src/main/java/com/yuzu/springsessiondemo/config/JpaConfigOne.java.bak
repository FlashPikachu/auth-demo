package com.yuzu.springsessiondemo.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;
import org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import javax.annotation.Resource;
import javax.sql.DataSource;

@Configuration
@EnableTransactionManagement
@EnableJpaRepositories(basePackages = "com.yuzu.springsessiondemo.repositories",
        entityManagerFactoryRef = "entityManagerFactoryBeanOne",
        transactionManagerRef = "platformTransactionManagerOne")
/*
basePackages 用来指定 dao 所在的位置。
entityManagerFactoryRef 用来指定实体类管理工厂 Bean 的名称
transactionManagerRef 用来指定事务管理器的引用名称，
默认的 Bean 名称为方法名
 */
public class JpaConfigOne {

    @Resource(name = "dsOne")
    DataSource dsOne;

    @Autowired
    JpaProperties jpaProperties;

//    @Bean
//    @Primary
//        //该 Bean 用来提供 EntityManager 实例
//    LocalContainerEntityManagerFactoryBean entityManagerFactoryBeanOne(
//            EntityManagerFactoryBuilder builder) {
//        return builder.dataSource(dsOne)//配置数据源
//                .properties(jpaProperties.getProperties())//设置 JPA 相关配置
//                .packages("com.yuzu.springsessiondemo.entity")//设置实体类所在的位置
//                .persistenceUnit("pu1")//配置持久化单元名。若项目中只有一个 EntityManagerFactory，则 persistenceUnit 可以省略掉，若有多个，则必须明确指定持久化单元名。
//                .build();
//    }
//
//    //创建一个事务管理器。JpaTransactionManager 提供对单个 EntityManagerFactory 的事务支持，专门用于解决 JPA 中的事务管理
//    @Bean
//    PlatformTransactionManager platformTransactionManagerOne(
//            EntityManagerFactoryBuilder builder) {
//        LocalContainerEntityManagerFactoryBean factoryBeanOne
//                = entityManagerFactoryBeanOne(builder);
//        return new JpaTransactionManager(factoryBeanOne.getObject());
//    }

}
